name: PR spam moderation (AI)
on:
  pull_request_target:
    types: [opened, edited, synchronize, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write
  models: read

jobs:
  moderate-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare PR context
        id: prep
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const pr = context.payload.pull_request;
            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number: pr.number, per_page: 100 }
            );

            const adds = files.reduce((s,f)=>s+f.additions,0);
            const dels = files.reduce((s,f)=>s+f.deletions,0);
            const changes = adds + dels;

            const onlyDocs = files.length > 0 && files.every(f =>
              /\.(md|rst|txt|adoc)$/i.test(f.filename) ||
              f.filename.startsWith('docs/') ||
              f.filename.startsWith('.github/')
            );

            const touchesCode = files.some(f =>
              f.filename.startsWith('lib/') ||
              f.filename.startsWith('benchmarks/') ||
              f.filename.startsWith('test/') ||
              /\.(js|mjs|cjs|ts|json)$/i.test(f.filename)
            );

            const hasLinkedIssue = /(^|\s)(fixe?s|close[sd]?|resolve[sd]?)\s+#\d+\b/i.test(pr.body || '') || /#\d+\b/.test(pr.body || '');

            const u = await github.rest.users.getByUsername({ username: pr.user.login });
            const accountAgeDays = Math.floor((Date.now() - new Date(u.data.created_at)) / 86400000);

            const text = [
              `Title: ${pr.title}`,
              `Author: @${pr.user.login} (â‰ˆ${accountAgeDays} days old)`,
              `Linked issue in body: ${hasLinkedIssue}`,
              `Files changed (${files.length}):`,
              ...files.map(f => ` - ${f.filename} (+${f.additions}/-${f.deletions})`),
              `Diff size: ${changes}`,
              `onlyDocs=${onlyDocs} touchesCode=${touchesCode}`,
              `--- PR body ---`,
              pr.body || '(empty)'
            ].join('\n');

            core.setOutput('text', text);

      # Ask the official AI assessor to label YES/NO for spam
      - name: AI assess PR
        id: ai
        uses: github/ai-assessment-comment-labeler@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue_number: ${{ github.event.pull_request.number }}
          issue_body: ${{ steps.prep.outputs.text }}
          prompts_directory: '.github/prompts'
          labels_to_prompts_mapping: 'pr-spam,pr-spam.prompt.yml'
          suppress_comments: true

      # Skip trusted collaborators (keeps false positives near-zero)
      - name: Check collaborator trust
        id: trust
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            try {
              const perm = await github.rest.repos.getCollaboratorPermissionLevel({
                owner, repo, username: context.payload.pull_request.user.login
              });
              const trusted = ['admin','maintain','write'].includes(perm.data.permission);
              core.setOutput('trusted', trusted ? 'true' : 'false');
            } catch { core.setOutput('trusted', 'false'); }

      # Close only when AI says YES and author isn't trusted
      - name: Close PR if spam
        if: contains(steps.ai.outputs.ai_assessments, 'ai:pr-spam:yes') && steps.trust.outputs.trusted == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const pr = context.payload.pull_request;
            const msg = `Thanks for the PR! We don't accept cosmetic README/docs-only tiny diffs or "add my name" changes.\n\n` +
                        `This was auto-triaged as likely spam. If incorrect, a maintainer can reopen.`;
            await github.rest.issues.createComment({ owner, repo, issue_number: pr.number, body: msg });
            await github.rest.pulls.update({ owner, repo, pull_number: pr.number, state: 'closed' });